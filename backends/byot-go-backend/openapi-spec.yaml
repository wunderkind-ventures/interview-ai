swagger: '2.0'
info:
  title: InterviewAI BYOT Backend API
  description: API for managing user-provided API keys and proxying AI requests for InterviewAI.
  version: '1.0.0'
# The host will be automatically generated when you deploy your API Gateway.
# Example: byot-gateway-xxxxxx-uc.a.run.app
# You can update this field later after deployment if needed.
host: your-gateway-id.uc.gateway.dev 
schemes:
  - https
produces:
  - application/json
consumes:
  - application/json

paths:
  /api/user/set-api-key:
    options:
      summary: Handle CORS preflight requests for Set API Key
      operationId: corsSetApiKey
      x-google-backend:
        address: "%s" # Placeholder for SetAPIKeyGCF URL (1st)
        # jwt_audience removed for OPTIONS
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string # Added based on common CORS setup
    post:
      summary: Stores or updates a user's Gemini API key securely.
      description: Requires Firebase JWT authentication. The API key is provided in the request body.
      operationId: setUserApiKey
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - apiKey
            properties:
              apiKey:
                type: string
                description: The user's Gemini API key.
      x-google-backend:
        address: "%s" # Placeholder for SetAPIKeyGCF URL (2nd)
        jwt_audience: "%s" # Placeholder for SetAPIKeyGCF jwt_audience (3rd)
      responses:
        '200':
          description: API key stored successfully.
          schema:
            type: object
            properties:
              message:
                type: string
                example: API key stored successfully
        '400':
          description: Bad Request (e.g., missing apiKey, invalid JSON).
        '401':
          description: Unauthorized (e.g., Firebase token invalid or missing).
        '500':
          description: Internal Server Error (e.g., failed to interact with Secret Manager).

  /api/user/remove-api-key:
    options:
      summary: Handle CORS preflight requests for Remove API Key
      operationId: corsRemoveApiKey
      x-google-backend:
        address: "%s" # Placeholder for RemoveAPIKeyGCF URL (4th)
        # jwt_audience removed for OPTIONS
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string # Added
    post:
      summary: Removes a user's stored Gemini API key.
      description: Requires Firebase JWT authentication.
      operationId: removeUserApiKey
      x-google-backend:
        address: "%s" # Placeholder for RemoveAPIKeyGCF URL (5th)
        jwt_audience: "%s" # Placeholder for RemoveAPIKeyGCF jwt_audience (6th)
      responses:
        '200':
          description: API key removed successfully or was not found.
          schema:
            type: object
            properties:
              message:
                type: string
                example: API key removed successfully
        '401':
          description: Unauthorized.
        '500':
          description: Internal Server Error.

  /api/user/api-key-status:
    options:
      summary: Handle CORS preflight requests for API Key Status
      operationId: corsApiKeyStatus
      x-google-backend:
        address: "%s" # Placeholder for GetAPIKeyStatusGCF URL (7th)
        # jwt_audience removed for OPTIONS
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string # Added
    get:
      summary: Checks if a user has an active Gemini API key stored.
      description: Requires Firebase JWT authentication.
      operationId: getUserApiKeyStatus
      x-google-backend:
        address: "%s" # Placeholder for GetAPIKeyStatusGCF URL (8th)
        jwt_audience: "%s" # Placeholder for GetAPIKeyStatusGCF jwt_audience (9th)
      responses:
        '200':
          description: Status of the user's API key.
          schema:
            type: object
            properties:
              hasKey:
                type: boolean
              status:
                type: string
        '401':
          description: Unauthorized.
        '500':
          description: Internal Server Error.

  /api/ai/genkit/{flowName}:
    options:
      summary: Handle CORS preflight requests for Genkit Flow
      operationId: corsGenkitFlow
      parameters:
        - name: flowName
          in: path
          required: true
          type: string
      x-google-backend:
        address: "%s" # Placeholder for ProxyToGenkitGCF URL (10th)
        path_translation: APPEND_PATH_TO_ADDRESS
        # jwt_audience removed for OPTIONS
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string # Added
    post:
      summary: Proxies a request to a specified Genkit AI flow.
      description: Requires Firebase JWT authentication. The specific AI flow is determined by the `flowName` path parameter. The request body is forwarded to the Genkit flow.
      operationId: proxyToGenkitFlow
      parameters:
        - name: flowName
          in: path
          required: true
          type: string
          description: The name of the Genkit flow to execute (e.g., customizeInterviewQuestions).
        - name: body
          in: body
          required: true
          schema:
            type: object
            additionalProperties: true 
            description: The JSON payload to be forwarded to the Genkit AI flow.
      x-google-backend:
        address: "%s" # Placeholder for ProxyToGenkitGCF URL (11th)
        path_translation: APPEND_PATH_TO_ADDRESS
        jwt_audience: "%s" # Placeholder for ProxyToGenkitGCF jwt_audience (12th)
      responses:
        '200':
          description: Successful response from the Genkit AI flow.
        '400':
          description: Bad Request (e.g., invalid input to the AI flow, flowName not found by proxy logic).
        '401':
          description: Unauthorized (Firebase token invalid).
        '500':
          description: Internal Server Error (e.g., proxy failure, error in AI flow execution).
        '503':
          description: Service Unavailable (e.g., failed to call the Next.js backend).