swagger: '2.0'
info:
  title: InterviewAI Catalyst Backend API
  description: API for managing user-provided API keys, proxying AI requests, and RAG content processing for InterviewAI.
  version: '2.0.0'
# The host will be automatically generated when you deploy your API Gateway.
# Example: catalyst-gateway-xxxxxx-uc.a.run.app
# You can update this field later after deployment if needed.
host: your-gateway-id.uc.gateway.dev 
schemes:
  - https
produces:
  - application/json
consumes:
  - application/json

# Disable all security - let Cloud Functions handle authentication
security: []

paths:
  /api/user/set-api-key:
    options:
      summary: Handle CORS preflight requests for Set API Key
      operationId: corsSetApiKey
      security: []  # Explicitly disable security
      x-google-backend:
        address: "%s" # Placeholder for SetAPIKeyGCF URL (1st)
        disable_auth: true  # Disable API Gateway auth processing
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string # Added based on common CORS setup
    post:
      summary: Stores or updates a user's Gemini API key securely.
      description: Requires Firebase JWT authentication. The API key is provided in the request body.
      operationId: setUserApiKey
      security: []  # Explicitly disable security
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - apiKey
            properties:
              apiKey:
                type: string
                description: The user's Gemini API key.
      x-google-backend:
        address: "%s" # Placeholder for SetAPIKeyGCF URL (2nd)
        disable_auth: true  # Disable API Gateway auth processing
      responses:
        '200':
          description: API key stored successfully.
          schema:
            type: object
            properties:
              message:
                type: string
                example: API key stored successfully
        '400':
          description: Bad Request (e.g., missing apiKey, invalid JSON).
        '401':
          description: Unauthorized (e.g., Firebase token invalid or missing).
        '500':
          description: Internal Server Error (e.g., failed to interact with Secret Manager).

  /api/user/remove-api-key:
    options:
      summary: Handle CORS preflight requests for Remove API Key
      operationId: corsRemoveApiKey
      security: []  # Explicitly disable security
      x-google-backend:
        address: "%s" # Placeholder for RemoveAPIKeyGCF URL (3rd)
        disable_auth: true  # Disable API Gateway auth processing
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string # Added
    post:
      summary: Removes a user's stored Gemini API key.
      description: Requires Firebase JWT authentication.
      operationId: removeUserApiKey
      security: []  # Explicitly disable security
      x-google-backend:
        address: "%s" # Placeholder for RemoveAPIKeyGCF URL (4th)
        disable_auth: true  # Disable API Gateway auth processing
      responses:
        '200':
          description: API key removed successfully or was not found.
          schema:
            type: object
            properties:
              message:
                type: string
                example: API key removed successfully
        '401':
          description: Unauthorized.
        '500':
          description: Internal Server Error.

  /api/user/api-key-status:
    options:
      summary: Handle CORS preflight requests for API Key Status
      operationId: corsApiKeyStatus
      security: []  # Explicitly disable security
      x-google-backend:
        address: "%s" # Placeholder for GetAPIKeyStatusGCF URL (5th)
        disable_auth: true  # Disable API Gateway auth processing
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string # Added
    get:
      summary: Checks if a user has an active Gemini API key stored.
      description: Requires Firebase JWT authentication.
      operationId: getUserApiKeyStatus
      security: []  # Explicitly disable security
      x-google-backend:
        address: "%s" # Placeholder for GetAPIKeyStatusGCF URL (6th)
        disable_auth: true  # Disable API Gateway auth processing
      responses:
        '200':
          description: Status of the user's API key.
          schema:
            type: object
            properties:
              hasKey:
                type: boolean
              status:
                type: string
        '401':
          description: Unauthorized.
        '500':
          description: Internal Server Error.

  /api/ai/genkit/{flowName}:
    options:
      summary: Handle CORS preflight requests for Genkit Flow
      operationId: corsGenkitFlow
      security: []  # Explicitly disable security
      parameters:
        - name: flowName
          in: path
          required: true
          type: string
      x-google-backend:
        address: "%s" # Placeholder for ProxyToGenkitGCF URL (7th)
        path_translation: APPEND_PATH_TO_ADDRESS
        disable_auth: true  # Disable API Gateway auth processing
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string # Added
    post:
      summary: Proxies a request to a specified Genkit AI flow.
      description: Requires Firebase JWT authentication. The specific AI flow is determined by the `flowName` path parameter. The request body is forwarded to the Genkit flow.
      operationId: proxyToGenkitFlow
      security: []  # Explicitly disable security
      parameters:
        - name: flowName
          in: path
          required: true
          type: string
          description: The name of the Genkit flow to execute (e.g., customizeInterviewQuestions).
        - name: body
          in: body
          required: true
          schema:
            type: object
            additionalProperties: true 
            description: The JSON payload to be forwarded to the Genkit AI flow.
      x-google-backend:
        address: "%s" # Placeholder for ProxyToGenkitGCF URL (8th)
        path_translation: APPEND_PATH_TO_ADDRESS
        disable_auth: true  # Disable API Gateway auth processing
      responses:
        '200':
          description: Successful response from the Genkit AI flow.
        '400':
          description: Bad Request (e.g., invalid input to the AI flow, flowName not found by proxy logic).
        '401':
          description: Unauthorized (Firebase token invalid).
        '500':
          description: Internal Server Error (e.g., proxy failure, error in AI flow execution).
        '503':
          description: Service Unavailable (e.g., failed to call the Next.js backend).

  /api/documents/parse-resume:
    options:
      summary: Handle CORS preflight requests for Parse Resume
      operationId: corsParseResume
      security: []
      x-google-backend:
        address: "%s" # Placeholder for ParseResume URL (9th)
        disable_auth: true
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string
    post:
      summary: Parses uploaded resume/document files
      description: Extracts text content from uploaded DOCX, PDF, or other document formats
      operationId: parseResume
      security: []
      x-google-backend:
        address: "%s" # Placeholder for ParseResume URL (10th)
        disable_auth: true
      responses:
        '200':
          description: Document parsed successfully
          schema:
            type: object
            properties:
              extractedText:
                type: string
              metadata:
                type: object
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  # ===== RAG ENDPOINTS =====
  /api/content/scrape:
    options:
      summary: Handle CORS preflight requests for Content Scraper
      operationId: corsContentScrape
      security: []
      x-google-backend:
        address: "%s" # Placeholder for ContentScraper URL (11th)
        disable_auth: true
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string
    post:
      summary: Scrapes content from YouTube videos or blog posts
      description: Extracts content, generates embeddings, and stores for RAG retrieval
      operationId: scrapeContent
      security: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - url
              - contentType
            properties:
              url:
                type: string
                description: URL to scrape (YouTube video or blog post)
              contentType:
                type: string
                enum: [youtube, blog]
                description: Type of content to scrape
              extractionOptions:
                type: object
                properties:
                  generateEmbeddings:
                    type: boolean
                    default: true
                  extractQuestions:
                    type: boolean
                    default: true
                  extractConcepts:
                    type: boolean
                    default: true
      x-google-backend:
        address: "%s" # Placeholder for ContentScraper URL (12th)
        disable_auth: true
      responses:
        '200':
          description: Content scraped successfully
          schema:
            $ref: '#/definitions/ScrapedContent'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Scraping failed

  /api/content/search:
    options:
      summary: Handle CORS preflight requests for Content Search
      operationId: corsContentSearch
      security: []
      x-google-backend:
        address: "%s" # Placeholder for ContentScraper URL (13th)
        disable_auth: true
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string
    get:
      summary: Searches scraped content by criteria
      description: Finds relevant content based on filters
      operationId: searchContent
      security: []
      parameters:
        - name: company
          in: query
          type: string
          description: Filter by target company
        - name: interviewType
          in: query
          type: string
          description: Filter by interview type
        - name: level
          in: query
          type: string
          description: Filter by target level
        - name: query
          in: query
          type: string
          description: Text search query
        - name: limit
          in: query
          type: integer
          default: 10
          description: Maximum number of results
      x-google-backend:
        address: "%s" # Placeholder for ContentScraper URL (14th)
        disable_auth: true
      responses:
        '200':
          description: Search results returned
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: '#/definitions/SearchResult'
              total:
                type: integer
        '401':
          description: Unauthorized

  /api/vector/search:
    options:
      summary: Handle CORS preflight requests for Vector Search
      operationId: corsVectorSearch
      security: []
      x-google-backend:
        address: "%s" # Placeholder for VectorSearch URL (15th)
        disable_auth: true
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string
    post:
      summary: Performs semantic search using vector similarity
      description: Advanced semantic search with embeddings
      operationId: vectorSearch
      security: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - query
            properties:
              query:
                type: string
                description: Search query
              filters:
                type: object
                description: Metadata filters
              limit:
                type: integer
                default: 10
                description: Maximum results
      x-google-backend:
        address: "%s" # Placeholder for VectorSearch URL (16th)
        disable_auth: true
      responses:
        '200':
          description: Search results with relevance scores
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: '#/definitions/SearchResult'
              total:
                type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /api/vector/upsert:
    options:
      summary: Handle CORS preflight requests for Vector Upsert
      operationId: corsVectorUpsert
      security: []
      x-google-backend:
        address: "%s" # Placeholder for VectorSearch URL (17th)
        disable_auth: true
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string
    post:
      summary: Upserts document embeddings to the vector index
      description: Stores or updates embeddings for vector search
      operationId: upsertVectorEmbeddings
      security: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - documents
            properties:
              documents:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    content:
                      type: string
                    embeddings:
                      type: object
                    metadata:
                      type: object
      x-google-backend:
        address: "%s" # Placeholder for VectorSearch URL (18th)
        disable_auth: true
      responses:
        '200':
          description: Embeddings upserted successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
              upserted:
                type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /api/vector/similar:
    options:
      summary: Handle CORS preflight requests for Similar Content
      operationId: corsSimilarContent
      security: []
      x-google-backend:
        address: "%s" # Placeholder for VectorSearch URL (19th)
        disable_auth: true
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string
    get:
      summary: Finds content similar to a given document
      description: Returns similar content based on vector similarity
      operationId: findSimilarContent
      security: []
      parameters:
        - name: documentId
          in: query
          type: string
          required: true
          description: ID of the reference document
        - name: limit
          in: query
          type: integer
          default: 5
          description: Maximum number of similar documents
      x-google-backend:
        address: "%s" # Placeholder for VectorSearch URL (20th)
        disable_auth: true
      responses:
        '200':
          description: Similar content found
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: '#/definitions/SearchResult'
              documentId:
                type: string
              total:
                type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  # ===== PYTHON AGENT ENDPOINTS =====
  /api/agents/interview/start:
    options:
      summary: Handle CORS preflight requests for Start Interview
      operationId: corsStartInterview
      security: []
      x-google-backend:
        address: "%s" # Placeholder for Python Agent Gateway URL (21st)
        disable_auth: true
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string
    post:
      summary: Starts a new interview session with Python ADK agents
      description: Initializes the orchestrator and agent ecosystem for an interview
      operationId: startInterview
      security: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - interviewType
              - faangLevel
            properties:
              interviewType:
                type: string
                enum: [behavioral, technical, system-design, leadership]
                description: Type of interview to conduct
              faangLevel:
                type: string
                enum: [L3, L4, L5, L6, L7]
                description: Target level for the interview
              resume:
                type: object
                description: Parsed resume data
              jobDescription:
                type: string
                description: Target job description
              targetCompany:
                type: string
                description: Target company name
      x-google-backend:
        address: "%s" # Placeholder for Python Agent Gateway URL (22nd)
        disable_auth: true
      responses:
        '200':
          description: Interview session started successfully
          schema:
            type: object
            properties:
              sessionId:
                type: string
                description: Unique session identifier
              state:
                type: string
                description: Current interview state
              complexity:
                type: string
                description: Assessed complexity level
              initialQuestion:
                type: string
                description: First interview question
              timestamp:
                type: string
                format: date-time
        '400':
          description: Bad request - invalid parameters
        '401':
          description: Unauthorized
        '500':
          description: Failed to start interview session

  /api/agents/interview/{sessionId}/respond:
    options:
      summary: Handle CORS preflight requests for Interview Response
      operationId: corsInterviewResponse
      security: []
      parameters:
        - name: sessionId
          in: path
          required: true
          type: string
      x-google-backend:
        address: "%s" # Placeholder for Python Agent Gateway URL (23rd)
        path_translation: APPEND_PATH_TO_ADDRESS
        disable_auth: true
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string
    post:
      summary: Submits a user response to the interview agents
      description: Processes user input through the agent ecosystem
      operationId: submitInterviewResponse
      security: []
      parameters:
        - name: sessionId
          in: path
          required: true
          type: string
          description: Interview session ID
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - response
            properties:
              response:
                type: string
                description: User's interview response
              responseTime:
                type: number
                description: Time taken to respond in seconds
      x-google-backend:
        address: "%s" # Placeholder for Python Agent Gateway URL (24th)
        path_translation: APPEND_PATH_TO_ADDRESS
        disable_auth: true
      responses:
        '200':
          description: Response processed successfully
          schema:
            type: object
            properties:
              nextQuestion:
                type: string
                description: Next interview question
              feedback:
                type: object
                description: Real-time feedback
              state:
                type: string
                description: Current interview state
              interventions:
                type: array
                items:
                  type: object
                description: Any intervention messages
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Session not found
        '500':
          description: Processing failed

  /api/agents/interview/{sessionId}/status:
    options:
      summary: Handle CORS preflight requests for Interview Status
      operationId: corsInterviewStatus
      security: []
      parameters:
        - name: sessionId
          in: path
          required: true
          type: string
      x-google-backend:
        address: "%s" # Placeholder for Python Agent Gateway URL (25th)
        path_translation: APPEND_PATH_TO_ADDRESS
        disable_auth: true
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string
    get:
      summary: Gets current status of an interview session
      description: Returns current state, scores, and session metadata
      operationId: getInterviewStatus
      security: []
      parameters:
        - name: sessionId
          in: path
          required: true
          type: string
          description: Interview session ID
      x-google-backend:
        address: "%s" # Placeholder for Python Agent Gateway URL (26th)
        path_translation: APPEND_PATH_TO_ADDRESS
        disable_auth: true
      responses:
        '200':
          description: Session status retrieved
          schema:
            type: object
            properties:
              sessionId:
                type: string
              currentState:
                type: string
              complexity:
                type: string
              durationSeconds:
                type: number
              stateTransitions:
                type: integer
              interventions:
                type: integer
              scores:
                type: object
              lastActivity:
                type: string
                format: date-time
        '401':
          description: Unauthorized
        '404':
          description: Session not found

  /api/agents/interview/{sessionId}/end:
    options:
      summary: Handle CORS preflight requests for End Interview
      operationId: corsEndInterview
      security: []
      parameters:
        - name: sessionId
          in: path
          required: true
          type: string
      x-google-backend:
        address: "%s" # Placeholder for Python Agent Gateway URL (27th)
        path_translation: APPEND_PATH_TO_ADDRESS
        disable_auth: true
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string
    post:
      summary: Ends an interview session and generates final report
      description: Terminates the session and triggers report generation
      operationId: endInterview
      security: []
      parameters:
        - name: sessionId
          in: path
          required: true
          type: string
          description: Interview session ID
      x-google-backend:
        address: "%s" # Placeholder for Python Agent Gateway URL (28th)
        path_translation: APPEND_PATH_TO_ADDRESS
        disable_auth: true
      responses:
        '200':
          description: Interview ended successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
              sessionSummary:
                type: object
                properties:
                  sessionId:
                    type: string
                  totalDuration:
                    type: number
                  finalScores:
                    type: object
                  interventionsCount:
                    type: integer
                  stateTransitionsCount:
                    type: integer
                  complexity:
                    type: string
                  reasoningStrategy:
                    type: string
              message:
                type: string
        '401':
          description: Unauthorized
        '404':
          description: Session not found
        '500':
          description: Failed to end session

  /api/agents/report/{sessionId}:
    options:
      summary: Handle CORS preflight requests for Interview Report
      operationId: corsInterviewReport
      security: []
      parameters:
        - name: sessionId
          in: path
          required: true
          type: string
      x-google-backend:
        address: "%s" # Placeholder for Python Agent Gateway URL (29th)
        path_translation: APPEND_PATH_TO_ADDRESS
        disable_auth: true
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string
    get:
      summary: Retrieves the final interview report
      description: Gets comprehensive analysis and recommendations
      operationId: getInterviewReport
      security: []
      parameters:
        - name: sessionId
          in: path
          required: true
          type: string
          description: Interview session ID
        - name: format
          in: query
          type: string
          enum: [json, pdf, markdown]
          default: json
          description: Report format
      x-google-backend:
        address: "%s" # Placeholder for Python Agent Gateway URL (30th)
        path_translation: APPEND_PATH_TO_ADDRESS
        disable_auth: true
      responses:
        '200':
          description: Report retrieved successfully
          schema:
            type: object
            properties:
              reportId:
                type: string
              sessionId:
                type: string
              generatedAt:
                type: string
                format: date-time
              format:
                type: string
              content:
                type: object
                properties:
                  executiveSummary:
                    type: string
                  detailedPerformance:
                    type: object
                  strengths:
                    type: array
                    items:
                      type: string
                  areasForImprovement:
                    type: array
                    items:
                      type: string
                  recommendations:
                    type: array
                    items:
                      type: string
                  transcript:
                    type: array
                    items:
                      type: object
        '401':
          description: Unauthorized
        '404':
          description: Report not found
        '500':
          description: Report generation failed

  /api/agents/health:
    options:
      summary: Handle CORS preflight requests for Agent Health
      operationId: corsAgentHealth
      security: []
      x-google-backend:
        address: "%s" # Placeholder for Python Agent Gateway URL (31st)
        disable_auth: true
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Credentials:
              type: string
    get:
      summary: Health check for Python agent infrastructure
      description: Returns status of all agents and infrastructure components
      operationId: getAgentHealth
      security: []
      x-google-backend:
        address: "%s" # Placeholder for Python Agent Gateway URL (32nd)
        disable_auth: true
      responses:
        '200':
          description: Health status retrieved
          schema:
            type: object
            properties:
              status:
                type: string
                enum: [healthy, degraded, down]
              agents:
                type: object
                properties:
                  orchestrator:
                    $ref: '#/definitions/AgentStatus'
                  context:
                    $ref: '#/definitions/AgentStatus'
                  interviewer:
                    $ref: '#/definitions/AgentStatus'
                  evaluator:
                    $ref: '#/definitions/AgentStatus'
                  synthesis:
                    $ref: '#/definitions/AgentStatus'
              infrastructure:
                type: object
                properties:
                  circuitBreakers:
                    type: object
                  telemetry:
                    type: boolean
                  database:
                    type: string
              timestamp:
                type: string
                format: date-time
        '503':
          description: Service unavailable

definitions:
  Error:
    type: object
    properties:
      error:
        type: string
      code:
        type: integer
      details:
        type: string

  ScrapedContent:
    type: object
    properties:
      source:
        type: object
        properties:
          type:
            type: string
          url:
            type: string
          title:
            type: string
          author:
            type: string
          datePublished:
            type: string
      contentType:
        type: string
      interviewType:
        type: string
      targetLevel:
        type: string
      targetCompany:
        type: string
      content:
        type: object
        properties:
          questions:
            type: array
            items:
              type: object
          concepts:
            type: array
            items:
              type: object
          tips:
            type: array
            items:
              type: object
          fullTranscript:
            type: string
      qualityScore:
        type: number
      embeddings:
        type: object

  SearchResult:
    type: object
    properties:
      id:
        type: string
      content:
        type: string
      source:
        type: string
      title:
        type: string
      score:
        type: number
      contentType:
        type: string
      metadata:
        type: object

  AgentStatus:
    type: object
    properties:
      name:
        type: string
      status:
        type: string
        enum: [active, inactive, error, initializing]
      lastActivity:
        type: string
        format: date-time
      uptimeSeconds:
        type: number
      messageQueueSize:
        type: integer
      circuitBreakerHealth:
        type: object
        properties:
          healthy:
            type: array
            items:
              type: string
          degraded:
            type: array
            items:
              type: string
          failed:
            type: array
            items:
              type: string