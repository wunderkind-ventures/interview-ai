
'use server';
/**
 * @fileOverview A specialized AI flow to refine draft interview feedback.
 *
 * - refineInterviewFeedback - A function that takes draft feedback and interview context, returning refined feedback.
 * - RefineInterviewFeedbackInput - The input type for the refineInterviewFeedback function.
 * - RefineInterviewFeedbackOutput - The return type for the refineInterviewFeedback function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import type {
  GenerateInterviewFeedbackOutput,
  InterviewType,
  InterviewStyle,
} from '@/lib/types'; // Assuming GenerateInterviewFeedbackOutput is exported from a shared types or the original flow file
import { GenerateInterviewFeedbackOutputSchema } from './generate-interview-feedback'; // Use the same output schema

// Define the interview context needed for refinement.
// This should align with what generateInterviewFeedback flow receives.
const InterviewContextSchema = z.object({
  interviewType: z.string(),
  interviewStyle: z.string(),
  faangLevel: z.string(),
  jobTitle: z.string().optional(),
  interviewFocus: z.string().optional(),
  // We don't need the full questions/answers/resume/JD here again,
  // as the draft feedback already incorporates them.
  // However, knowing if timeTakenMs was generally available in the draft could be useful.
  timeWasTracked: z.boolean().describe("Indicates if timeTakenMs was generally available in the draft feedback items.")
});

export const RefineInterviewFeedbackInputSchema = z.object({
  draftFeedback: GenerateInterviewFeedbackOutputSchema.describe(
    'The draft feedback generated by the initial feedback flow.'
  ),
  interviewContext: InterviewContextSchema.describe(
    'The original context of the interview.'
  ),
});
export type RefineInterviewFeedbackInput = z.infer<
  typeof RefineInterviewFeedbackInputSchema
>;

// The output is the same structure, just refined.
export type RefineInterviewFeedbackOutput = GenerateInterviewFeedbackOutput;

export async function refineInterviewFeedback(
  input: RefineInterviewFeedbackInput
): Promise<RefineInterviewFeedbackOutput> {
  return refineInterviewFeedbackFlow(input);
}

const refinePrompt = ai.definePrompt({
  name: 'refineInterviewFeedbackPrompt',
  input: {schema: RefineInterviewFeedbackInputSchema},
  output: {schema: GenerateInterviewFeedbackOutputSchema}, // Output is the same refined structure
  prompt: `You are an Expert Feedback Polisher AI. Your task is to review and refine DRAFT interview feedback to make it exceptionally clear, concise, actionable, and supportive.

**Original Interview Context:**
- Type: {{interviewContext.interviewType}}
- Style: {{interviewContext.interviewStyle}}
- Level: {{interviewContext.faangLevel}}
{{#if interviewContext.jobTitle}}- Job Title: {{interviewContext.jobTitle}}{{/if}}
{{#if interviewContext.interviewFocus}}- Specific Focus: {{interviewContext.interviewFocus}}{{/if}}
{{#if interviewContext.timeWasTracked}}(Note: Time taken for answers was tracked and may be present in the draft feedback items.){{/if}}

**DRAFT Feedback for Review:**

**Overall Summary (Draft):**
"{{draftFeedback.overallSummary}}"

**Feedback Items (Draft):**
{{#each draftFeedback.feedbackItems}}
---
Question ID: {{this.questionId}}
Question: "{{this.questionText}}"
Answer: "{{this.answerText}}"
{{#if this.timeTakenMs}}(Time taken: {{this.timeTakenMs}} ms){{/if}}

Critique (Draft): "{{this.critique}}"
Strengths (Draft): {{#if this.strengths.length}}{{jsonEncode this.strengths}}{{else}}None listed.{{/if}}
Areas for Improvement (Draft): {{#if this.areasForImprovement.length}}{{jsonEncode this.areasForImprovement}}{{else}}None listed.{{/if}}
Specific Suggestions (Draft): {{#if this.specificSuggestions.length}}{{jsonEncode this.specificSuggestions}}{{else}}None listed.{{/if}}
Ideal Answer Pointers (Draft): {{#if this.idealAnswerPointers.length}}{{jsonEncode this.idealAnswerPointers}}{{else}}None listed.{{/if}}
---
{{/each}}

**Your Task: REFINE the draft feedback based on the following criteria.**
Your output MUST be in the same JSON format as the input 'draftFeedback' (keys 'feedbackItems' and 'overallSummary').
Do NOT simply repeat the draft. Provide tangible improvements.

1.  **Clarity & Conciseness:**
    *   Rephrase any jargon or overly complex sentences into simple, direct language.
    *   Eliminate redundancy. Ensure each point is distinct and impactful.
    *   The overall summary should be easy to grasp and provide a clear takeaway.

2.  **Tone:**
    *   Ensure the tone is consistently supportive, encouraging, and constructive. Avoid overly harsh or critical language.
    *   Frame 'areasForImprovement' as opportunities for growth and learning.

3.  **Actionability:**
    *   'SpecificSuggestions' must be highly practical and provide clear, actionable steps the candidate can take.
    *   'AreasForImprovement' should clearly identify what needs work, ideally with a hint towards how.

4.  **Completeness & Relevance (Especially for Overall Summary):**
    *   **Pacing Check:** If 'interviewContext.timeWasTracked' is true, critically assess if the draft 'overallSummary' adequately comments on the candidate's pacing and time management. If this aspect is missing or too generic in the draft, enhance this part of the summary with specific observations based on the interview context (e.g., "Your answers were generally well-paced, but for complex questions like Q2, consider allocating a bit more time to fully develop your thoughts, especially given the '{{interviewContext.faangLevel}}' target and '{{interviewContext.interviewStyle}}' style.").
    *   **Focus Check:** If an 'interviewFocus' was provided (e.g., "{{interviewContext.interviewFocus}}"), ensure the 'overallSummary' and relevant 'feedbackItems' (especially the critique and pointers) explicitly address how well the candidate addressed this focus. If this is weak or missing in the draft, strengthen this aspect.
    *   Ensure all feedback components (critique, strengths, areas, suggestions, ideal pointers) are well-developed, distinct, and insightful for each 'feedbackItem'. If any section in the draft feels underdeveloped, generic, or repetitive, enhance it with more specific details or examples.

5.  **Maintain Original IDs and Structure:**
    *   The 'questionId' for each feedback item must be preserved.
    *   The output must conform to the same JSON structure as the input 'draftFeedback', containing an array of 'feedbackItems' and an 'overallSummary' string.

Return ONLY the refined JSON object.
`,
});

const refineInterviewFeedbackFlow = ai.defineFlow(
  {
    name: 'refineInterviewFeedbackFlow',
    inputSchema: RefineInterviewFeedbackInputSchema,
    outputSchema: GenerateInterviewFeedbackOutputSchema, // Output is the same structure
  },
  async (input: RefineInterviewFeedbackInput) => {
    // Helper to ensure arrays are passed correctly to Handlebars, even if empty
    const processedDraftFeedback = {
      ...input.draftFeedback,
      feedbackItems: input.draftFeedback.feedbackItems.map(item => ({
        ...item,
        strengths: item.strengths || [],
        areasForImprovement: item.areasForImprovement || [],
        specificSuggestions: item.specificSuggestions || [],
        idealAnswerPointers: item.idealAnswerPointers || [],
      }))
    };

    const {output} = await refinePrompt({ ...input, draftFeedback: processedDraftFeedback });
    if (!output) {
      throw new Error('AI did not return refined feedback.');
    }
    // Ensure the output structure is what we expect, especially for potentially empty arrays
    const validatedOutput: RefineInterviewFeedbackOutput = {
        overallSummary: output.overallSummary,
        feedbackItems: output.feedbackItems.map(item => ({
            ...item,
            strengths: item.strengths || [],
            areasForImprovement: item.areasForImprovement || [],
            specificSuggestions: item.specificSuggestions || [],
            idealAnswerPointers: item.idealAnswerPointers || [],
        })),
    };
    return validatedOutput;
  }
);
