'use server';
/**
 * @fileOverview A specialized AI flow to refine draft interview feedback.
 *
 * - refineInterviewFeedback - A function that takes draft feedback and interview context, returning refined feedback.
 * - RefineInterviewFeedbackInput - The input type for the refineInterviewFeedback function.
 * - RefineInterviewFeedbackOutput - The return type for the refineInterviewFeedback function.
 */

import { genkit } from 'genkit';
import { googleAI } from '@genkit-ai/googleai';
import { ai as globalAi } from '@/ai/genkit';
import {z} from 'genkit';
import { GenerateInterviewFeedbackOutputSchema } from '../schemas'; 
import type { GenerateInterviewFeedbackOutput } from '../schemas';
import { loadPromptFile, renderPromptTemplate } from '../utils/promptUtils';

const InterviewContextSchema = z.object({
  interviewType: z.string(),
  interviewStyle: z.string(),
  faangLevel: z.string(),
  jobTitle: z.string().optional(),
  interviewFocus: z.string().optional(),
  timeWasTracked: z.boolean().describe("Indicates if timeTakenMs was generally available in the draft feedback items.")
});

const RefineInterviewFeedbackInputSchema = z.object({
  draftFeedback: GenerateInterviewFeedbackOutputSchema.describe(
    'The draft feedback generated by the initial feedback flow. This includes critiques, strengths, areas for improvement, suggestions, ideal pointers, confidence scores, and draft reflection prompts.'
  ),
  interviewContext: InterviewContextSchema.describe(
    'The original context of the interview.'
  ),
});
export type RefineInterviewFeedbackInput = z.infer<
  typeof RefineInterviewFeedbackInputSchema
>;

export type RefineInterviewFeedbackOutput = GenerateInterviewFeedbackOutput; 

const RAW_REFINE_FEEDBACK_PROMPT_TEMPLATE = loadPromptFile("refine-interview-feedback.prompt");

export async function refineInterviewFeedback(
  input: RefineInterviewFeedbackInput,
  options?: { aiInstance?: any; apiKey?: string }
): Promise<RefineInterviewFeedbackOutput> {
  let activeAI = globalAi;
  const flowNameForLogging = 'refineInterviewFeedback';

  if (options?.aiInstance) {
    activeAI = options.aiInstance;
    console.log(`[BYOK] ${flowNameForLogging}: Using provided aiInstance.`);
  } else if (options?.apiKey) {
    try {
      activeAI = genkit({
        plugins: [googleAI({ apiKey: options.apiKey })],
      });
      console.log(`[BYOK] ${flowNameForLogging}: Using user-provided API key.`);
    } catch (e) {
      console.warn(`[BYOK] ${flowNameForLogging}: Failed to initialize Genkit with user-provided API key: ${(e as Error).message}. Falling back to default.`);
      activeAI = globalAi;
    }
  } else {
    console.log(`[BYOK] ${flowNameForLogging}: No specific API key or AI instance provided; using default global AI instance.`);
  }

  try {
    const renderedPrompt = renderPromptTemplate(RAW_REFINE_FEEDBACK_PROMPT_TEMPLATE, input);
    console.log(`[BYOK] ${flowNameForLogging}: Rendered Prompt:\n`, renderedPrompt);
    console.log(`[BYOK] ${flowNameForLogging}: Input to flow:`, JSON.stringify(input, null, 2));

    const generateResult = await activeAI.generate<typeof GenerateInterviewFeedbackOutputSchema>({
      prompt: renderedPrompt,
      model: googleAI.model('gemini-1.5-flash-latest'),
      output: { schema: GenerateInterviewFeedbackOutputSchema },
      config: { responseMimeType: "application/json" },
    });

    const output = generateResult.output;

    if (!output) {
      console.error('Refined feedback is null or undefined');
      throw new Error('Refined feedback generation failed to produce an output.');
    }

    return output;
  } catch (error) {
    console.error(`Error in ${flowNameForLogging}:`, error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    throw new Error(`Feedback refinement failed: ${errorMessage}`);
  }
}
